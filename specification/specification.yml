openapi: 3.0.3
info:
  title: API сервер для личного проекта "Что посмотреть".
  description: Список ресурсов и маршрутов сервера "Что посмотреть".
  version: 1.0.0
tags:
  - name: movies
    description: Действия с фильмами.
  - name: users
    description: Действия с пользователями.
  - name: comments
    description: Действия с комментариями.

paths:
  /movies/create:
    post:
      tags:
        - movies
      summary: Добавление нового фильма.
      description: Добавляет новый фильм.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Информация для добавления нового фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMovie'
        required: true

      responses:
        "201":
          description: Фильм добавлен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Некорректный запрос.

        "401":
          description: Пользователь не авторизован.

  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Получение детальной информации по фильму.
      description: Получает детальную информацию по определенному фильму.

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: id фильма.

      responses:
        "200":
          description: Получена детальная информация по фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "404":
          description: Фильма с данным id не существует.

    patch:
      tags:
        - movies
      summary: Редактирование карточки фильма.
      description: Редактирует карточку фильма, созданную пользователем.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: id фильма.

      requestBody:
        description: Полный набор информации и идентификатор редактируемого фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMovie'
        required: true

      responses:
        "200":
          description: Фильм обновлен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Некорректный запрос.

        "401":
          description: Пользователь не авторизован.

        "403":
          description: У пользователя нет прав на редактирование.

        "404":
          description: Фильма с данным id не существует.

    delete:
      tags:
        - movies
      summary: Удаление карточки фильма.
      description: Удаляет карточку фильма, созданную пользователем.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: id фильма.

      requestBody:
        description: Id пользователя, пытающегося удалить фильм.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteMovie"
              type: object

              properties:
                userId:
                  type: string
                  format: uuid

      responses:
        "204":
          description: Фильм удален.

        "401":
          description: Пользователь не авторизован.

        "403":
          description: Запрещено удаление фильма данным пользователем.

        "404":
          description: Фильма с данным id не существует.

  /movies?genre=Documentary:
    get:
      tags:
        - movies
      summary: Получение списка фильмов.
      description: Возвращает список фильмов (по умолчанию не больше 50).

      parameters:
        - in: query
          name: genre
          schema:
            type: string
            enum: [ Comedy, Crime, Documentary, Drama, Horror, Family, Romance, Scifi, Thriller ]
            example: Documentary

      responses:
        "200":
          description: Получен список фильмов.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'

        "400":
          description: Некорректный запрос.

  /movies/promo:
    get:
      tags:
        - movies
      summary: Получение промо-фильма.
      description: Получение детальной информации по промо-фильму.

      responses:
        "200":
          description: Детальная информация по промо-фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

  /movies/{movieId}/comments:
    get:
      tags:
        - comments
      summary: Получить список комментариев для определённого фильма.
      description: Возвращает список комментариев для определенного фильма.

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Id фильма, по которому нужно получить комментарии.

      responses:
        "200":
          description: Список комментариев к фильму.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

        "404":
          description: Фильм с таким id не существует.

  /users/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя.
      description: Регистрация нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'

      responses:
        "201":
          description: Пользователь зарегистрирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения.
      description: Авторизует пользователя на основе логина и пароля.

      requestBody:
        required: true
        description: Логин и пароль авторизующегося пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUser"

              properties:
                login:
                  type: string
                  example: prefie@bk.ru

                password:
                  type: string
                  example: qwerty

      responses:
        "200":
          description:
            Успешно авторизован.
            Возвращается JWT Bearer токен для дальнейшего взаимодействия с API.
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    format: jwt

        "401":
          description: Пользователь не существует или в паре логин пароль допущены ошибки.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя.
      description: Возвращает информацию по авторизованному пользователю.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Получена информация о пользователе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Пользователь не авторизован. Невалидный токен.

  /comments:
    post:
      tags:
        - comments
      summary: Добавить новый комментарий к определённому фильму.
      description: Добавляет новый комментарий к определенному фильму.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Id фильма, к которому добавляют комментарий и сам комментарий.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/comment'
                - type: object
                  properties:
                    movieId:
                      type: string
                      format: uuid
                  required:
                    - movieId

      responses:
        "201":
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "400":
          description: Некорректный запрос.

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Фильм с данным id не найден.

components:
  schemas:
    createUser:
      type: object

      properties:
        name:
          type: string
          example: Vasya

        email:
          type: string
          example: prefie@bk.ru

        password:
          type: string
          example: qwerty

    loginUser:
      type: object

      properties:
        login:
          type: string
          example: prefie@bk.ru

        password:
          type: string
          example: qwerty

    user:
      type: object

      properties:
        id:
          type: string
          format: uuid

        email:
          type: string
          example: prefie@bk.ru


    createMovie:
      type: object

      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Бумажный дом

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Люди в масках Дали грабят Монетный двор Испании.

        postDate:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

        genre:
          type: string
          enum: [ Comedy, Crime, Documentary, Drama, Horror, Family, Romance, Scifi, Thriller ]
          example: Documentary

        year:
          type: integer
          example: 2001

        previewPath:
          type: string
          format: url
          example: https://example.com

        videoPath:
          type: string
          format: url
          example: https://example.com

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Мелисса МакКарти, Джеффри Раш ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Джеффри Раш

        duration:
          type: number
          minimum: 1

        userId:
          type: string
          format: uuid

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: example.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: example.jpg

        backgroundColor:
          type: string
          example: red

      required:
        - name
        - description
        - postDate
        - genre
        - year
        - previewPath
        - videoPath
        - actors
        - director
        - duration
        - userId
        - posterPath
        - backgroundImagePath
        - backgroundColor

    movie:
      type: object

      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Бумажный дом

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Люди в масках Дали грабят Монетный двор Испании.

        postDate:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

        genre:
          type: string
          enum: [ Comedy, Crime, Documentary, Drama, Horror, Family, Romance, Scifi, Thriller ]
          example: Documentary

        year:
          type: integer
          example: 2001

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 7

        previewPath:
          type: string
          format: url
          example: https://example.com

        videoPath:
          type: string
          format: url
          example: https://example.com

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Мелисса МакКарти, Джеффри Раш ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Джеффри Раш

        duration:
          type: number
          minimum: 1
          example: 90

        commentsCount:
          type: integer
          minimum: 0
          example: 3

        user:
          $ref: '#/components/schemas/user'

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: example.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: example.jpg

        backgroundColor:
          type: string
          example: red

      required:
        - name
        - description
        - postDate
        - genre
        - year
        - rating
        - previewPath
        - year
        - actors
        - director
        - duration
        - commentsCount
        - user
        - posterPath
        - backgroundImagePath
        - backgroundColor

    updateMovie:
      allOf:
        - $ref: '#/components/schemas/createMovie'
        - type: object
          properties:
            movieId:
              type: string
              format: uuid
          required:
            - movieId

    deleteMovie:
      type: object

      properties:
        userId:
          type: string
          format: uuid

    comment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Лучший фильм!! Всем советую!

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 10

        date:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z

        author:
          $ref: '#/components/schemas/user'

      required:
        - text
        - rating
        - author
